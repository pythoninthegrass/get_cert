name: Release Please

# TODO: revert branches and paths
on:
  push:
    # branches: ['main', 'master']
    # paths:
    #   - 'get_cert.py'
    #   - 'get_cert.spec'
    #   - 'requirements.txt'
    #   - '*.md'
  pull_request:
    branches: ['main', 'master']
    paths:
      - 'get_cert.py'
      - 'get_cert.spec'
      - 'requirements.txt'
      - '*.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - name: Release with release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  upload-assets:
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest successful build artifacts
          run_id=$(gh run list --workflow=build.yml --branch main --status completed --limit 1 --json databaseId --jq '.[0].databaseId')
          gh run download $run_id

          # Get existing release assets
          existing_assets=$(gh release view ${{ needs.release-please.outputs.tag_name }} --json assets --jq '.assets[].name')

          # Upload new artifacts
          uploaded=false
          for file in */*.zip; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              if ! echo "$existing_assets" | grep -q "$filename"; then
                gh release upload ${{ needs.release-please.outputs.tag_name }} "$file" --clobber
                echo "Uploaded $filename to release"
                uploaded=true
              fi
            fi
          done

          $uploaded || echo "No new artifacts were uploaded to the release."
