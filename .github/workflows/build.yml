name: Build Executables

on:
  push:
    branches: ['main', 'master']
  pull_request:
    branches: ['main', 'master']
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache
        arch: [x64, arm64]
        exclude:
          # Exclude arm64 builds on ubuntu and windows for now
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ${{ matrix.path }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
         ${{ runner.os }}-pip-

    - name: Cache Chocolatey packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      env:
        cache-name: choco-upx-cache
      with:
        path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.UPX_VERSION }}

    - name: Install UPX (Windows-only)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      env:
        UPX_VERSION: 4.2.4
      run: |
        $cachedUpx = Get-ChildItem -Path "C:\Users\runneradmin\AppData\Local\Temp\chocolatey" -Filter "upx.$env:UPX_VERSION.nupkg" -Recurse
        if ($cachedUpx) {
          choco install upx --version $env:UPX_VERSION --source="C:\Users\runneradmin\AppData\Local\Temp\chocolatey"
        } else {
          choco install upx --version $env:UPX_VERSION
        }

    - name: Build with PyInstaller
      run: |
        pyinstaller get_cert.spec --clean

    - name: Create renamed archive (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cd dist
        os_lower=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
        arch_lower=$(echo ${{ matrix.arch }} | tr '[:upper:]' '[:lower:]')
        zip get_cert_${os_lower}_${arch_lower}.zip get_cert

    - name: Create renamed archive (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd dist
        $os_lower = '${{ runner.os }}'.ToLower()
        $arch_lower = '${{ matrix.arch }}'.ToLower()
        Compress-Archive -Path get_cert.exe -DestinationPath "get_cert_${os_lower}_${arch_lower}.zip"

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: get_cert_${{ runner.os }}_${{ matrix.arch }}
        path: dist/get_cert_${{ runner.os }}_${{ matrix.arch }}.zip

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Download all artifacts
      uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in get_cert_*/*.zip; do
          asset_name=$(basename $file)
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/zip" \
               --data-binary @"$file" \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${asset_name}"
        done
