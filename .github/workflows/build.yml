name: Build Executables

on:
  push:
    branches: ['main', 'master']
  pull_request:
    branches: ['main', 'master']
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache
        arch: [x64, arm64]
        exclude:
          # Exclude arm64 builds on ubuntu and windows for now
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ matrix.path }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
         ${{ runner.os }}-pip-

    - name: Install UPX (Windows-only)
      if: matrix.os == 'windows-latest'
      run: choco install upx

    - name: Build with PyInstaller
      run: |
        pyinstaller get_cert.spec --clean --name "get_cert_${{ runner.os }}_${{ matrix.arch }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: get_cert_${{ runner.os }}_${{ matrix.arch }}
        path: dist/get_cert_*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Download all artifacts
      uses: actions/download-artifact@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in get_cert_*/*; do
          asset_name=$(basename $file)
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @"$file" \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${asset_name}"
        done
